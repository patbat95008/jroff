head	1.13;
access;
symbols;
locks;
comment	@# @;


1.13
date	2014.02.04.02.50.42;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.03.00.18.13;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.03.00.16.47;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.03.00.12.47;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.03.00.12.09;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.02.23.07.33;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.02.22.59.22;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.01.22.13.45;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.01.22.10.35;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.01.22.09.07;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.01.22.05.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.01.31.22.20.57;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.01.30.03.51.40;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: linkedqueue.java,v 1.12 2014-02-02 16:18:13-08 - - $
//
// Insert and remove functions by:
// Patrick Russell
// 
// Username:
// pcrussel
//

import java.util.NoSuchElementException;

class linkedqueue <item_t> {

   private class node{
      item_t item;
      node link;

      //sets what the item in the node is
      void setItem (item_t any){
         item = any;
      }

      //returns the item in the node
      item_t getItem (){
         return item;
      }

      //links the node to another node
      void setLink (node link){
         this.link = link;
      }

      //returns the next node in the list
      node getLink (){
         return link;
      }
         
   }

   //
   // INVARIANT:  front == null && rear == null
   //          || front != null && rear != null
   // In the latter case, following links from the node pointed 
   // at by front will lead to the node pointed at by rear.
   //
 
  private node front = null;
  private node rear = null;

   //empty() tests to see if the list has any elements in it
   public boolean empty (){
      return front == null;
   }

   //pushes a value onto the rear of the queue
   public void insert (item_t any) {
      //node tmp is a temporary node used to store and
      //link the values into the queue
      node tmp = new node();
      tmp.setItem(any);
      
      //if there are no items in the list, add tmp to
      //the list and point front and rear to it
      if(front == null){
         front = tmp;
         rear  = tmp;
      //otherwise, set the link of the rear of the list
      //to tmp, then make rear point to tmp
      }else{
         rear.setLink(tmp);
         rear = tmp;         
      }
      
   }
   
   //removes and returns the item at the front of the
   //queue
   public item_t remove (){
      //if the list is empty, throw an error
      if (empty()) throw new NoSuchElementException();
      //point the temporary node to the front of the list
      //node tmp = front;
      //pull the value out of the front item
      item_t value = front.getItem();
      //point the front to equal the next 
      //item in the queue
      front = front.getLink();
      
      return value;
   }

}
@


1.12
log
@-
@
text
@d1 8
a8 1
// $Id: linkedqueue.java,v 1.11 2014-02-02 16:16:47-08 - - $
a37 1
      
d50 1
d55 1
d57 2
d63 1
a63 1
      //the list and link them together
d67 2
d75 3
a77 1

d79 1
d81 3
a83 3
          
      node tmp = front;

d85 2
a86 1

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.10 2014-02-02 16:12:47-08 - - $
d66 1
a66 3
      if (front.getLink() == null){
         return null;
      }
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.9 2014-02-02 16:12:09-08 - - $
d67 1
a67 1
         throw new NoSuchElementException();
d69 1
a69 1
      node tmp = front.getLink();
d73 1
a73 1
      front = tmp;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.8 2014-02-02 15:07:33-08 - - $
d67 1
a67 1
         throw NoSuchElementException();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.7 2014-02-02 14:59:22-08 - - $
d66 4
a69 2

      node tmp = front.getLink().getLink();
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.6 2014-02-01 14:13:45-08 - - $
d65 2
a68 2
      if (empty ()) throw new NoSuchElementException ();

d71 1
a71 1
      front.setLink(tmp);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.5 2014-02-01 14:10:35-08 - - $
d30 1
a31 8
      //finds the last item of the list
      node getRear(){
         if (link.getLink() == null){
            return link;
         }else{
           return link.getRear();
         }
      }
d40 1
a40 1
   //font and rear were once private
a44 3
      front = null;
      rear = null;

d54 3
a56 3
      if(front.getLink() == null){
         front.setLink(tmp);
         tmp.setLink(rear);
d58 2
a59 1
         front.getRear().setLink(tmp);         
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.4 2014-02-01 14:09:07-08 - - $
d36 1
a36 1
            link.getRear();
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.3 2014-02-01 14:05:41-08 - - $
d48 2
a49 2
    node front = null;
    node rear = null;
d80 1
a80 1
      front.setlink(tmp);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.2 2014-01-31 14:20:57-08 - - $
d22 2
a23 2
      void setLink (node next){
         link = next;
d47 3
a49 2
   private node front = null;
   private node rear = null;
d65 1
a65 1
         front = tmp;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.1 2014-01-29 19:51:40-08 - - $
d10 29
d59 5
a63 3
      tmp.item = any;
      tmp.link = null;
      if(front == null){
d65 1
a65 1
         tmp.link = rear;
d67 1
a67 2
                     
         
d69 1
a69 2
         
      // STUB: Add code here to insert an item_t into the queue.
d73 2
d76 5
a80 3
      item_t value = head.item_t;
      head = head.link;
      // STUB: Add code for remove here.
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: linkedqueue.java,v 1.1 2011-01-20 21:05:43-08 - - $
d22 3
d32 1
a32 1
      if(front.link == null){
d36 2
a37 2
         tmp.link = front;
         front = tmp;
d45 2
d48 1
a48 1
      return null; // STUB: Delete this return statement.
@
